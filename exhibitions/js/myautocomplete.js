var vufindRecordBase = "";

//Get the vufind record base from the configuration file
jQuery.get("config/config.txt", function(content) {
	configArr = content.split(new RegExp("\\n"));
	$.each(configArr, function(index, element) {
		elementPieces = element.split(": ");
		if(elementPieces[0] == "vufindRecordBase") {
			vufindRecordBase = elementPieces[1];
		}
	});
});

function setupAutocomplete() {
	$( "#exhibitionSearch" ).autocomplete({
		source: function( request, response ) {
			var query = request.term;
			suggest(query, response);
		},
		minLength: 2,
		select: searchSelectedQuery,
		open: function() {
			$( this ).removeClass( "ui-corner-all" ).addClass( "ui-corner-top" );
		},
		close: function() {
			$( this ).removeClass( "ui-corner-top" ).addClass( "ui-corner-all" );
		}
	});
}

//Generate suggestions for the using the term that the user types in
function suggest(query, response) {
	queryStr = "PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#> \
				PREFIX crm: <http://erlangen-crm.org/current/> \
				PREFIX ycba_event: <http://collection.britishart.yale.edu/id/thesauri/event/> \
				PREFIX fts: <http://www.ontotext.com/owlim/fts#>\
				SELECT DISTINCT ?label   WHERE { \
					?exhibition  rdfs:label ?label . \
					?exhibition crm:P2_has_type ycba_event:exhibition_history. \
					<" + query + ":> fts:prefixMatchIgnoreCase ?label . \
				}";
	endpoint = 'http://collection.britishart.yale.edu/openrdf-sesame/repositories/ycba';
	querySparql(queryStr, endpoint, displaySuggest, response);		
}

//Display suggestions generated by a sparql search
function displaySuggest(data, response) {
	//remove all items from autocomplete menu
	$('.ui-autocomplete').empty();
	
	//sort labels alphabetically
	data.results.bindings.sort(function(a, b){
		var nameA=a.label.value.toLowerCase(), nameB=b.label.value.toLowerCase()
		if (nameA < nameB) //sort string ascending
		return -1 
		if (nameA > nameB)
		return 1
		return 0 //default return value (no sorting)
	});
	
	var index = 0;
	var moreIsWritten = false;	
	response( $.map( data.results.bindings, function( item ) {
		if(index == 10 && !moreIsWritten) {
			moreIsWritten = true;
			return {
				specialLabel: "show-more-item",
				customHTML: "<div class='autocompleteMenu'>" + 
							"<div class='more'><p>Show More</p></div>" +
							"<div>"
			}		
		}
		
		index++;
		
		var label = item.label.value;
		return {
			label: label,
			value: label,
			customHTML: "<div class='autocompleteMenu'>" + 
							"<div class='label'><p title='" + label + "'>" + label + "</p></div>" +
						"</div>"
		}
	}));
		
	numAutocompleteItems = index;
	var j = 11;
	for( ; j <= index; j++) {
		$('.ui-autocomplete li').eq(j).hide();
	}
	
	$('.ui-autocomplete li').eq(10).click(function(event) { showMore(); });
	
	//customize autocomplete menu
	_renderItem = function( ul, item) {
		return $( "<li></li>" )
			.data( "item.autocomplete", item )
			.append( $( "<a style = \"height:16px\"></a>" ).html(item.customHTML) )
			.appendTo( ul );
	}	
}

//shows the hidden items in the autocomplete menu
function showMore() {
	clickedShowMore = true;
	var j = 11;
	for( ; j <= numAutocompleteItems; j++) {
		$('.ui-autocomplete li').eq(j).show();
	}
	$('.ui-autocomplete li').eq(10).hide();
}

//search for item the user selects
function searchSelectedQuery(event, ui) {
	query = ui.item ? ui.item.label : this.value;
	query = query.split("\"");
	query = query.join("");

	//quotations identify sparql literal strings
	//so escape them in the query
	query = query.split("\"");
	query = query.join("\\\"");	
	queryStr = "PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#> \
				PREFIX crm: <http://erlangen-crm.org/current/> \
				PREFIX ycba_title: <http://collection.britishart.yale.edu/id/thesaurus/title/> \
				PREFIX ycba_identifier: <http://collection.britishart.yale.edu/id/thesauri/identifier/> \
				PREFIX bmo: <http://collection.britishmuseum.org/id/ontology/> \
				SELECT DISTINCT ?exhibitionTitle ?thumbUrl ?objectTitle ?vufindRecordId  WHERE { \
					?objectUri  crm:P12i_was_present_at ?exhibition . \
					?exhibition  rdfs:label \"" + query + "\" . \
					?exhibition  rdfs:label ?exhibitionTitle . \
					?objectUri crm:P102_has_title ?titleUri . \
					?titleUri crm:P2_has_type ycba_title:preferred . \
					?titleUri rdfs:label ?objectTitle. \
					?objectUri bmo:PX_has_main_representation ?thumbUrl . \
					?objectUri crm:P1_is_identified_by ?ccdUri . \
					?ccdUri crm:P2_has_type ycba_identifier:ccd . \
					?ccdUri rdfs:label ?vufindRecordId .\
				}";
						
	endpoint = 'http://collection.britishart.yale.edu/openrdf-sesame/repositories/ycba';
	querySparql(queryStr, endpoint, displayExhibition);		
}

//display objects shown at the exhibition that the user selected
function displayExhibition(data) {
	$('div.section2 h1').empty();
	list = $('div.section2 ul.exhibitionObjects');
	list.empty();
	$.each(data.results.bindings, function(index, bs) {
		if(index == 0)
			$('div.section2 h1').append(bs["exhibitionTitle"].value);
		list.append("<li><div class='thumb'><a href='" + vufindRecordBase + 
						bs["vufindRecordId"].value + 
						"'><img onerror=\"this.src='images/noCover3.gif';\" src='" + 
						bs["thumbUrl"].value + "'/></a></div><div class='objectInfo' title='" + 
						bs["objectTitle"].value + "'>" + bs["objectTitle"].value + "</div></li>");
	});		
}

function querySparql(queryStr, endpoint, callback, response) {
	response = response || "";
	$.ajax({
		url: endpoint,
		dataType: 'json', 
		data: { 
			//queryLn: 'SPARQL', server assumes it is SPARQL, can be SeRQL
			query: queryStr,
		 //   limit: '10',  //limit is part of sparql query not sesame api
		 //   infer: 'true',
			Accept: 'application/sparql-results+json'
		},
		success: function(data) { callback(data, response); }, 
	});	
}

//not used in this application
function getURLParameter() {
	return decodeURI(
		(RegExp('exhibition' + '=' + '(.+?)(&|$)').exec(location.search)||[,null])[1]
	);
}	